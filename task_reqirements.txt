We're thinking of creating a tokenized prediction platform here.

So, we'll require a standard ERC-20 smart contract that can be easily deployed by me. The ERC-20 smart contract will be created to represent each option in the prediction event and can be traded during the time, until the end of the event.

Example:
We'll be having a prediction on the champions of English Premier League. So, we'll require 20 ERC-20 smart contract, each representing one of the 20 teams in the league.

Throughout the season, users can choose to buy or sell the tokens representing the team through a DEX. So, if Manchester City is doing very well, everyone will start buying the tokens, and if Watford is doing very badly, they can start selling it.

We'll also require 2 different kinds of crowdsale smart contracts.
1. To allow token holders to swap their team tokens for rewards at the end of the season.
2. To allow users to purchase those team tokens before the start of the season.

Example: Swap their team tokens for rewards at the end of the season.

Manchester City has won the EPL championship. We'll be rewarding the token holders of the Manchester City token.

So, the token holders will need to send us their tokens, and we'll be giving them USDT as rewards. The token holders will not be getting back their Manchester City tokens anymore after receiving the USDT, so it's something like a crowdsale, but using their tokens, and exchange for USDT.

Example: To allow users to purchase those team tokens before the start of the season

After creating the 20 tokens each representing a team in the league, there will be a token sale period, like ICO, for all the 20 teams. The token sales will decide the total supply of each team token, and all tokens will be set at 1 token for 1 USDT.

So, the popular teams will have a huge supply, and the less popular teams have a lesser supply because lesser people bought them. This crowdsale contract will determine the total supply of the tokens, and once the sale period ends, the supply of each token will be capped. However, we might need this crowdsale contract to automatically mint 1% of the sold supply to the contract owner, so at least we can add some liquidity for each team token for it to be tradeable.

I hope this is not confusing, and I'll be happy to answer any questions you have. We have other future plans for this project as well, like potentially staking the team tokens to get NFT of their favorite team as rewards maybe, or something crazier we can think of in future if we work together.

So for the erc20 token part :

1. Simple ERC20 for all supported chains

2. Token - event code, team name, symbol, accepted usdt contract address to be filled up by owner (decimal fixed at 18)

3. Token - Owner to input trade pair contract address (from DEX)

4. Token - Circ supply to be calculated - Total supply subtracts trade pair contract supply.

5. Crowdsale contract - All tokens to be at the same price and funds received can be forwarded to Gnosis Safe contract

6. Crowdsale contract - tokens to be minted and sent only when funds received from sender

7. Crowdsale contract - to accept USDT/USDC or other stablecoin tokens of choice of owner. Exchange rate will be 1 to 1 (1 USDT to 1 token)

8. Crowdsale contract - UNIX time to be implemented for all start and end times of sale.

9. Crowdsale contract - 1% of sold supply to be minted to owner at the end of sale.

*as smart contract will be deployed multiple times by the owner, certain parameters such as those mentioned above will need to be input by owner

** I can only use solidity for deployment, so I'll need the smart contracts to be flattened.Â 

As for the reward smart contract: (similar to crowdsale in a reverse manner)

1. Allow owner to set 'buying' token and reward token when initializing smart contract
2. Allow owner to rescue reward token in case of a mistake from owner
3. Allow owner to set rates for buy/reward token (Rewards/total staking token supply)
4. Min staking period of 24 hours (in case of a mistake from the owner)
5. UNIX time for start and end of claim time (contract will stop working at the end of claim time)

You can adopt the codes from OpenZappelin for the tokens contract easily. As for the crowdsale, we have a smart contract that you can refer to if you'd like.

The reward contract is kind of similar to a crowdsale contract as well.